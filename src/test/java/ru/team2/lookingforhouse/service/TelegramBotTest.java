package ru.team2.lookingforhouse.service;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.internal.verification.Times;
import org.mockito.junit.jupiter.MockitoExtension;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Chat;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.team2.lookingforhouse.config.BotConfig;
import com.vdurmont.emoji.EmojiParser;
import ru.team2.lookingforhouse.model.UserCat;
import ru.team2.lookingforhouse.model.UserDog;
import ru.team2.lookingforhouse.repository.UserCatRepository;
import ru.team2.lookingforhouse.repository.UserDogRepository;

import static ru.team2.lookingforhouse.util.Constant.*;

import static org.assertj.core.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class TelegramBotTest {
    @Mock
    private BotConfig botConfig;
    @Mock
    private UserCatRepository userCatRepository;
    @Mock
    private UserDogRepository userDogRepository;
    @Spy
    @InjectMocks
    private TelegramBot telegramBot;

    @Test
    public void handlesStartTest() throws TelegramApiException {
        Update update = new Update();
        update.setMessage(new Message());
        update.getMessage().setChat(new Chat());
        update.getMessage().setText("/start");
        update.getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot, new Times(2)).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        String txtMsg = EmojiParser.parseToUnicode("–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–∏—é—Ç —Å–æ–±–∞–∫ üê∂  –∏–ª–∏ –∫–æ—à–µ–∫  üê±");
        assertThat(actual.getChatId()).isEqualTo(update.getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo(txtMsg);

    }

    @Test
    public void handlesDogButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setMessage(new Message());
        update.getMessage().setChat(new Chat());
        update.getMessage().setText("/dog");
        update.getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(userDogRepository).save(any(UserDog.class));
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?");
    }

    @Test
    public void handlesCatButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setMessage(new Message());
        update.getMessage().setChat(new Chat());
        update.getMessage().setText("/cat");
        update.getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(userCatRepository).save(any(UserCat.class));
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?");
    }

    @Test
    public void handlesCallVolunteerTest() throws TelegramApiException {
        Update update = new Update();
        update.setMessage(new Message());
        update.getMessage().setChat(new Chat());
        update.getMessage().getChat().setFirstName("Name");
        update.getMessage().setText("/call_volunteer");
        update.getMessage().getChat().setId(123L);

        when(telegramBot.generateRandomChatId()).thenReturn(123L);
        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot, times(2)).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo(
                "–¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ Name. –ß–∞—Ç-–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - 123");

    }

    @Test
    public void handlesUnknownCommandTest() throws TelegramApiException {
        Update update = new Update();
        update.setMessage(new Message());
        update.getMessage().setText("Any unknown command");
        update.getMessage().setChat(new Chat());
        update.getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo("–ù–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑");
    }

    @Test
    public void handlesAddressDogButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().setData(ADDRESS_DOG_BUTTON);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo("""
                            –ñ–ö –ò–Ω—Ñ–∏–Ω–∏—Ç–∏, –ö–∞–±–∞–Ω–±–∞–π –±–∞—Ç—ã—Ä–∞, 40, –ê—Å—Ç–∞–Ω–∞ 010000, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω
                            –¢–µ–ª–µ—Ñ–æ–Ω: +7 707 818 0770
                            –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: 9:00 - 21:00
                            """);
    }

    @Test
    public void handlesAddressCatButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setData(ADDRESS_CAT_BUTTON);
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo("""
                            —É–ª–∏—Ü–∞ –ë–µ–π–±–∏—Ç—à–∏–ª–∏–∫ 67, –ê—Å—Ç–∞–Ω–∞ 010000, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω
                            –¢–µ–ª–µ—Ñ–æ–Ω: +7 701 874 3939
                            –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: 10:00 - 20:00
                            """);
    }

    @Test
    public void handlesDrivingDirectionsDogButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setData(DRIVING_DIRECTIONS_DOG_BUTTON);
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo(DRIVING_DIRECTIONS_DOG_LINK);
    }

    @Test
    public void handlesDrivingDirectionsCatButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setData(DRIVING_DIRECTIONS_CAT_BUTTON);
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo(DRIVING_DIRECTIONS_CAT_LINK);
    }

    @Test
    public void safetyPrecautionsDogButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setData(SAFETY_PRECAUTIONS_DOG_BUTTON);
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo("""
                            –ü—Ä–∞–≤–∏–ª–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è —Å —Å–æ–±–∞–∫–∞–º–∏.
                            –í –ø—Ä–∏—é—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞–π—Ç–µ, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç —Ä–∞–±–æ—Ç–Ω–∏–∫ –∏–ª–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä.
                            –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –∫–∞–ª–∏—Ç–∫–∏ –≤–æ–ª—å–µ—Ä–æ–≤ –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è!
                            –ù–µ –Ω–∞–¥–æ –ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–≥–ª–∞–¥–∏—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ —á–µ—Ä–µ–∑ —Å–µ—Ç–∫—É! –í—Å–µ –∂–∏–≤–æ—Ç–Ω—ã–µ –≤ –ø—Ä–∏—é—Ç–µ –æ—á–µ–Ω—å —Ä–∞–∑–Ω—ã–µ, —Å—Ä–µ–¥–∏ –Ω–∏—Ö –µ—Å—Ç—å –∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ.\s
                            –ù–µ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ–∑—Ç–∏ –∫ –æ—á–µ–Ω—å –ø–ª–∞—á–µ–≤–Ω—ã–º –∏ —Ç—Ä–∞–≥–∏—á–µ—Å–∫–∏–º —Å–∏—Ç—É–∞—Ü–∏—è–º.
                            –¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–ª—É—á–∞–π–Ω–æ –≤—ã–ø—É—Å—Ç–∏—Ç—å –∂–∏–≤–æ—Ç–Ω—ã—Ö, —á—Ç–æ —Å–æ–∑–¥–∞—Å—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ—Å—Ç–∏.\s
                            –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã!""");
    }

    @Test
    public void safetyPrecautionsCatButtonTest() throws TelegramApiException {
        Update update = new Update();
        update.setCallbackQuery(new CallbackQuery());
        update.getCallbackQuery().setData(SAFETY_PRECAUTIONS_CAT_BUTTON);
        update.getCallbackQuery().setMessage(new Message());
        update.getCallbackQuery().getMessage().setMessageId(1);
        update.getCallbackQuery().getMessage().setChat(new Chat());
        update.getCallbackQuery().getMessage().getChat().setId(123L);

        telegramBot.onUpdateReceived(update);

        ArgumentCaptor<SendMessage> argumentCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(argumentCaptor.capture());
        SendMessage actual = argumentCaptor.getValue();
        assertThat(actual.getChatId()).isEqualTo(update.getCallbackQuery().getMessage().getChatId().toString());
        assertThat(actual.getText()).isEqualTo("""
                            –ü—Ä–∞–≤–∏–ª–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è —Å –∫–æ—à–∫–∞–º–∏.
                            –û–±—â–∞—è—Å—å —Å –∫–æ—à–∫–∞–º–∏, –ø–æ–º–Ω–∏—Ç–µ –æ–± –∏—Ö –∂–µ–ª–∞–Ω–∏—è—Ö –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö.
                            –ï—Å–ª–∏ –≤—ã –ø—Ä–∏—à–ª–∏ —Å —Ä–µ–±–µ–Ω–∫–æ–º, –ø–æ–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ä–µ–±–µ–Ω–∫—É –Ω–∞ —Å–≤–æ–µ–º –ø—Ä–∏–º–µ—Ä–µ –∫–∞–∫ –æ–±—â–∞—Ç—å—Å—è —Å –∫–æ—à–∫–æ–π.
                            –õ—é–±–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ, –¥–∞–∂–µ —Å–∞–º–æ–µ –ª–∞—Å–∫–æ–≤–æ–µ –∏ –ø—É—à–∏—Å—Ç–æ–µ, –∏–º–µ–µ—Ç –∫–æ–≥—Ç–∏ –∏ –∑—É–±—ã.
                            –ü—Ä–∏–∫–∞—Å–∞–π—Ç–µ—Å—å –∫ –∫–æ—à–∫–∞–º –±–µ—Ä–µ–∂–Ω–æ. –î–≤–∏–≥–∞–π—Ç–µ—Å—å —Å–ø–æ–∫–æ–π–Ω–æ, –±–µ–∑ —Ä–µ–∑–∫–∏—Ö –¥–≤–∏–∂–µ–Ω–∏–π.
                            –ù–µ –ø—É–≥–∞–π—Ç–µ –∫–æ—à–µ–∫ –∫—Ä–∏–∫–∞–º–∏ –∏ —Ä–µ–∑–∫–∏–º–∏ –∑–≤—É–∫–∞–º–∏, –Ω–µ –±—Ä–æ—Å–∞–π—Ç–µ.
                            –ù–µ —Ç—Ä–æ–≥–∞–π—Ç–µ –≥–ª–∞–∑–∞ –∏ —É—à–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö, –Ω–µ –¥–µ—Ä–≥–∞–π—Ç–µ –∑–∞ —à–µ—Ä—Å—Ç—å –∏ —Ö–≤–æ—Å—Ç.
                            –ù–µ –∫–æ—Ä–º–∏—Ç–µ –∫–æ—à–µ–∫ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏, –ø—Ä–∏–Ω–µ—Å–µ–Ω–Ω—ã–º–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è–º–∏ —Å —Å–æ–±–æ–π. –£—Ç–æ—á–Ω–∏—Ç–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —á—Ç–æ –ª—É—á—à–µ –ø—Ä–∏–Ω–µ—Å—Ç–∏ –≤ –ø–æ–¥–∞—Ä–æ–∫.""");
    }


}
